/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Login
     * @description Login
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description request request */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.LoginRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpResponse-dto_LoginResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Logout
     * @description Logout
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/refresh-token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Refresh Token
     * @description Refresh Token
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description request request */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.RefreshTokenRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpResponse-dto_TokenResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register
     * @description Register
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description request request */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.RegisterRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpResponse-dto_RegisterResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get me
     * @description Get me
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpResponse-dto_UserResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update me
     * @description Update user's profile
     */
    patch: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description request request */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.UserUpdateRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpResponse-dto_UserResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
      }
    }
    trace?: never
  }
  '/api/v1/messages': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * list all direct message chats
     * @description list all direct message chats for each individual user
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpListResponse-dto_ChatDirectResponse']
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['dto.HttpError']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/messages/ws': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * connect to websocket
     * @description Establish a WebSocket connection for real-time communication.
     *     The message from a server will be in a format of "[EVENT] [MESSAGE]" which [EVENT] can be "ERROR" or "MESSAGE".
     *     If [EVENT] is error, [MESSAGE] will be a string of error message ,otherwise it will be a dto.RealTimeMessageResponse
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Switching Protocols */
        101: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    'dto.ChatDirectResponse': {
      messages?: components['schemas']['dto.DirectMessageResponse'][]
      user?: components['schemas']['dto.PublicUserResponse']
    }
    'dto.DirectMessageResponse': {
      content?: string
      id?: number
      receiverId?: number
      sendedAt?: string
      senderId?: number
    }
    'dto.HttpError': {
      error?: string
    }
    'dto.HttpListResponse-dto_ChatDirectResponse': {
      result?: components['schemas']['dto.ChatDirectResponse'][]
    }
    'dto.HttpResponse-dto_LoginResponse': {
      result?: components['schemas']['dto.LoginResponse']
    }
    'dto.HttpResponse-dto_RegisterResponse': {
      result?: components['schemas']['dto.RegisterResponse']
    }
    'dto.HttpResponse-dto_TokenResponse': {
      result?: components['schemas']['dto.TokenResponse']
    }
    'dto.HttpResponse-dto_UserResponse': {
      result?: components['schemas']['dto.UserResponse']
    }
    'dto.LoginRequest': {
      idToken: string
      /** @description GOOGLE */
      provider: string
    }
    'dto.LoginResponse': {
      accessToken?: string
      exp?: number
      refreshToken?: string
      user?: components['schemas']['dto.UserResponse']
    }
    'dto.PublicUserResponse': {
      email?: string
      id?: number
      name?: string
      profilePictureUrl?: string
    }
    'dto.RefreshTokenRequest': {
      refreshToken: string
    }
    'dto.RegisterRequest': {
      idToken: string
      /** @description GOOGLE */
      provider: string
    }
    'dto.RegisterResponse': {
      accessToken?: string
      exp?: number
      refreshToken?: string
      user?: components['schemas']['dto.UserResponse']
    }
    'dto.TokenResponse': {
      accessToken?: string
      exp?: number
      refreshToken?: string
    }
    'dto.UserResponse': {
      email?: string
      id?: number
      name?: string
      profilePictureUrl?: string
    }
    'dto.UserUpdateRequest': {
      name?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
